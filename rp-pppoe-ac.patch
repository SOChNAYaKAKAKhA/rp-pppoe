diff -urN rp-pppoe-3.5.org/scripts/adsl-setup.in rp-pppoe-3.5/scripts/adsl-setup.in
--- rp-pppoe-3.5.org/scripts/adsl-setup.in	Wed Sep 25 17:05:37 2002
+++ rp-pppoe-3.5/scripts/adsl-setup.in	Wed Sep 25 17:08:51 2002
@@ -20,7 +20,6 @@
 IFCONFIG=/sbin/ifconfig
 PPPD=@PPPD@
 PPPOE=@sbindir@/pppoe
-ECHO=@ECHO@
 LOGGER="/usr/bin/logger -t `basename $0`"
 
 # Set to "C" locale so we can parse messages from commands
@@ -35,34 +34,34 @@
 copy() {
     cp $1 $2
     if [ "$?" != 0 ] ; then
-	$ECHO "*** Error copying $1 to $2"
-	$ECHO "*** Quitting."
+	echo "*** Error copying $1 to $2"
+	echo "*** Quitting."
 	exit 1
     fi
 }
 
-$ECHO "Welcome to the Roaring Penguin ADSL client setup.  First, I will run"
-$ECHO "some checks on your system to make sure the PPPoE client is installed"
-$ECHO "properly..."
-$ECHO ""
+echo "Welcome to the Roaring Penguin ADSL client setup.  First, I will run"
+echo "some checks on your system to make sure the PPPoE client is installed"
+echo "properly..."
+echo ""
 
 # Must be root
 if [ "`@ID@ -u`" != 0 ] ; then
-    $ECHO "$0: Sorry, you must be root to run this script"
+    echo "$0: Sorry, you must be root to run this script"
     exit 1
 fi
 
 # Prototype config file must exist
 if [ ! -r "$CONFIG" ] ; then
-    $ECHO "Oh, dear, I don't see the file '$CONFIG' anywhere.  Please"
-    $ECHO "re-install the PPPoE client."
+    echo "Oh, dear, I don't see the file '$CONFIG' anywhere.  Please"
+    echo "re-install the PPPoE client."
     exit 1
 fi
 
 # Must have pppd
 if [ ! -x $PPPD ] ; then
-    $ECHO "Oops, I can't execute the program '$PPPD'.  You"
-    $ECHO "must install the PPP software suite, version 2.3.10 or later."
+    echo "Oops, I can't execute the program '$PPPD'.  You"
+    echo "must install the PPP software suite, version 2.3.10 or later."
     exit 1
 fi
 
@@ -74,18 +73,18 @@
 
 # pppoe must exist
 if [ ! -x "$PPPOE" ] ; then
-    $ECHO "Oh, dear, I can't execute the program '$PPPOE'.  Please"
-    $ECHO "re-install the rp-pppoe client."
+    echo "Oh, dear, I can't execute the program '$PPPOE'.  Please"
+    echo "re-install the rp-pppoe client."
     exit 1
 fi
 
-$ECHO "Looks good!  Now, please enter some information:"
+echo "Looks good!  Now, please enter some information:"
 
 while [ true ] ; do
-    $ECHO ""
-    $ECHO "USER NAME"
-    $ECHO ""
-    $ECHO -n ">>> Enter your PPPoE user name (default $USER): "
+    echo ""
+    echo "USER NAME"
+    echo ""
+    echo -n ">>> Enter your PPPoE user name (default $USER): "
     read U
 
     if [ "$U" = "" ] ; then
@@ -96,112 +95,112 @@
     if test `uname -s` = "Linux" ; then
 	$IFCONFIG $ETH > /dev/null 2>&1 || ETH=eth0
     fi
-    $ECHO ""
-    $ECHO "INTERFACE"
-    $ECHO ""
-    $ECHO ">>> Enter the Ethernet interface connected to the ADSL modem"
-    $ECHO "For Solaris, this is likely to be something like /dev/hme0."
-    $ECHO "For Linux, it will be ethn, where 'n' is a number."
-    $ECHO -n "(default $ETH): "
+    echo ""
+    echo "INTERFACE"
+    echo ""
+    echo ">>> Enter the Ethernet interface connected to the ADSL modem"
+    echo "For Solaris, this is likely to be something like /dev/hme0."
+    echo "For Linux, it will be ethn, where 'n' is a number."
+    echo -n "(default $ETH): "
     read E
 
     if [ "$E" = "" ] ; then
 	E="$ETH"
     fi
 
-    $ECHO ""
-    $ECHO "Do you want the link to come up on demand, or stay up continuously?"
-    $ECHO "If you want it to come up on demand, enter the idle time in seconds"
-    $ECHO "after which the link should be dropped.  If you want the link to"
-    $ECHO "stay up permanently, enter 'no' (two letters, lower-case.)"
-    $ECHO "NOTE: Demand-activated links do not interact well with dynamic IP"
-    $ECHO "addresses.  You may have some problems with demand-activated links."
-    $ECHO -n ">>> Enter the demand value (default $DEMAND): "
+    echo ""
+    echo "Do you want the link to come up on demand, or stay up continuously?"
+    echo "If you want it to come up on demand, enter the idle time in seconds"
+    echo "after which the link should be dropped.  If you want the link to"
+    echo "stay up permanently, enter 'no' (two letters, lower-case.)"
+    echo "NOTE: Demand-activated links do not interact well with dynamic IP"
+    echo "addresses.  You may have some problems with demand-activated links."
+    echo -n ">>> Enter the demand value (default $DEMAND): "
     read D
     if [ "$D" = "" ] ; then
 	D=$DEMAND
     fi
 
-    $ECHO ""
-    $ECHO "DNS"
-    $ECHO ""
-    $ECHO "Please enter the IP address of your ISP's primary DNS server."
-    $ECHO "If your ISP claims that 'the server will provide DNS addresses',"
-    $ECHO "enter 'server' (all lower-case) here."
-    $ECHO "If you just press enter, I will assume you know what you are"
-    $ECHO "doing and not modify your DNS setup."
-    $ECHO -n ">>> Enter the DNS information here: "
+    echo ""
+    echo "DNS"
+    echo ""
+    echo "Please enter the IP address of your ISP's primary DNS server."
+    echo "If your ISP claims that 'the server will provide DNS addresses',"
+    echo "enter 'server' (all lower-case) here."
+    echo "If you just press enter, I will assume you know what you are"
+    echo "doing and not modify your DNS setup."
+    echo -n ">>> Enter the DNS information here: "
 
     read DNS1
 
 
     if [ "$DNS1" != "" ] ; then
         if [ "$DNS1" != "server" ] ; then
-	    $ECHO "Please enter the IP address of your ISP's secondary DNS server."
-	    $ECHO "If you just press enter, I will assume there is only one DNS server."
-	    $ECHO -n ">>> Enter the secondary DNS server address here: "
+	    echo "Please enter the IP address of your ISP's secondary DNS server."
+	    echo "If you just press enter, I will assume there is only one DNS server."
+	    echo -n ">>> Enter the secondary DNS server address here: "
 	    read DNS2
 	fi
     fi
 
     while [ true ] ; do
-	$ECHO ""
-	$ECHO "PASSWORD"
-	$ECHO ""
+	echo ""
+	echo "PASSWORD"
+	echo ""
 	stty -echo
-	$ECHO -n ">>> Please enter your PPPoE password:    "
+	echo -n ">>> Please enter your PPPoE password:    "
 	read PWD1
-	$ECHO ""
-	$ECHO -n ">>> Please re-enter your PPPoE password: "
+	echo ""
+	echo -n ">>> Please re-enter your PPPoE password: "
 	read PWD2
-	$ECHO ""
+	echo ""
 	stty echo
 	if [ "$PWD1" = "$PWD2" ] ; then
 	    break
 	fi
 
-	$ECHO -n ">>> Sorry, the passwords do not match.  Try again? (y/n)"
+	echo -n ">>> Sorry, the passwords do not match.  Try again? (y/n)"
 	read ANS
 	case "$ANS" in
 	    N|No|NO|Non|n|no|non)
-		$ECHO "OK, quitting.  Bye."
+		echo "OK, quitting.  Bye."
 		exit 1
 	esac
     done
 
     # Firewalling
-    $ECHO ""
-    $ECHO "FIREWALLING"
-    $ECHO ""
+    echo ""
+    echo "FIREWALLING"
+    echo ""
     if test `uname -s` != "Linux" ; then
-	$ECHO "Sorry, firewalling is only supported under Linux.  Consult"
-	$ECHO "your operating system manuals for details on setting up"
-	$ECHO "packet filters for your system."
+	echo "Sorry, firewalling is only supported under Linux.  Consult"
+	echo "your operating system manuals for details on setting up"
+	echo "packet filters for your system."
 	FIREWALL=NONE
     else
-	$ECHO "Please choose the firewall rules to use.  Note that these rules are"
-	$ECHO "very basic.  You are strongly encouraged to use a more sophisticated"
-	$ECHO "firewall setup; however, these will provide basic security.  If you"
-	$ECHO "are running any servers on your machine, you must choose 'NONE' and"
-	$ECHO "set up firewalling yourself.  Otherwise, the firewall rules will deny"
-	$ECHO "access to all standard servers like Web, e-mail, ftp, etc.  If you"
-	$ECHO "are using SSH, the rules will block outgoing SSH connections which"
-	$ECHO "allocate a privileged source port."
-	$ECHO ""
+	echo "Please choose the firewall rules to use.  Note that these rules are"
+	echo "very basic.  You are strongly encouraged to use a more sophisticated"
+	echo "firewall setup; however, these will provide basic security.  If you"
+	echo "are running any servers on your machine, you must choose 'NONE' and"
+	echo "set up firewalling yourself.  Otherwise, the firewall rules will deny"
+	echo "access to all standard servers like Web, e-mail, ftp, etc.  If you"
+	echo "are using SSH, the rules will block outgoing SSH connections which"
+	echo "allocate a privileged source port."
+	echo ""
 	while [ true ] ; do
-	    $ECHO "The firewall choices are:"
-	    $ECHO "0 - NONE: This script will not set any firewall rules.  You are responsible"
-	    $ECHO "          for ensuring the security of your machine.  You are STRONGLY"
-	    $ECHO "          recommended to use some kind of firewall rules."
-	    $ECHO "1 - STANDALONE: Appropriate for a basic stand-alone web-surfing workstation"
-	    $ECHO "2 - MASQUERADE: Appropriate for a machine acting as an Internet gateway"
-	    $ECHO "                for a LAN"
-	    $ECHO -n ">>> Choose a type of firewall (0-2): "
+	    echo "The firewall choices are:"
+	    echo "0 - NONE: This script will not set any firewall rules.  You are responsible"
+	    echo "          for ensuring the security of your machine.  You are STRONGLY"
+	    echo "          recommended to use some kind of firewall rules."
+	    echo "1 - STANDALONE: Appropriate for a basic stand-alone web-surfing workstation"
+	    echo "2 - MASQUERADE: Appropriate for a machine acting as an Internet gateway"
+	    echo "                for a LAN"
+	    echo -n ">>> Choose a type of firewall (0-2): "
 	    read a
 	    if [ "$a" = 0 -o "$a" = 1 -o "$a" = 2 ] ; then
 		break
 	    fi
-	    $ECHO "Please enter a number from 0 to 2"
+	    echo "Please enter a number from 0 to 2"
 	done
 
 	case "$a" in
@@ -217,33 +216,33 @@
 	esac
     fi
 
-    $ECHO ""
-    $ECHO "** Summary of what you entered **"
-    $ECHO ""
-    $ECHO "Ethernet Interface: $E"
-    $ECHO "User name:          $U"
+    echo ""
+    echo "** Summary of what you entered **"
+    echo ""
+    echo "Ethernet Interface: $E"
+    echo "User name:          $U"
     if [ "$D" = "no" ] ; then
-	$ECHO "Activate-on-demand: No"
+	echo "Activate-on-demand: No"
     else
-	$ECHO "Activate-on-demand: Yes; idle timeout = $D seconds"
+	echo "Activate-on-demand: Yes; idle timeout = $D seconds"
     fi
 
     if [ "$DNS1" != "" ] ; then
         if [ "$DNS1" = "server" ] ; then
-	    $ECHO "DNS addresses:      Supplied by ISP's server"
+	    echo "DNS addresses:      Supplied by ISP's server"
         else
-	    $ECHO "Primary DNS:        $DNS1"
+	    echo "Primary DNS:        $DNS1"
 	    if [ "$DNS2" != "" ] ; then
-		$ECHO "Secondary DNS:      $DNS2"
+		echo "Secondary DNS:      $DNS2"
 	    fi
         fi
     else
-	$ECHO "DNS:                Do not adjust"
+	echo "DNS:                Do not adjust"
     fi
-    $ECHO "Firewalling:        $FIREWALL"
-    $ECHO ""
+    echo "Firewalling:        $FIREWALL"
+    echo ""
     while [ true ] ; do
-        $ECHO -n '>>> Accept these settings and adjust configuration files (y/n)? '
+        echo -n '>>> Accept these settings and adjust configuration files (y/n)? '
         read ANS
 	case "ANS" in
 	    Y|y|yes|Yes|oui|Oui)
@@ -264,7 +263,7 @@
 
 # Adjust configuration files.  First to $CONFIG
 
-$ECHO "Adjusting $CONFIG"
+echo "Adjusting $CONFIG"
 
 copy $CONFIG $CONFIG-bak
 if [ "$DNS1" = "server" ] ; then
@@ -300,53 +299,53 @@
     < $CONFIG-bak > $CONFIG
 
 if [ $? != 0 ] ; then
-    $ECHO "** Error modifying $CONFIG"
-    $ECHO "** Quitting"
+    echo "** Error modifying $CONFIG"
+    echo "** Quitting"
     exit 1
 fi
 
 if [ "$DNS1" != "" ] ; then
     if [ "$DNS1" != "server" ] ; then
-	$ECHO "Adjusting /etc/resolv.conf"
+	echo "Adjusting /etc/resolv.conf"
 	if [ -r /etc/resolv.conf ] ; then
 	    grep -s "MADE-BY-RP-PPPOE" /etc/resolv.conf > /dev/null 2>&1
 	    if [ "$?" != 0 ] ; then
-		$ECHO "  (But first backing it up to /etc/resolv.conf-bak)"
+		echo "  (But first backing it up to /etc/resolv.conf-bak)"
 		copy /etc/resolv.conf /etc/resolv.conf-bak
 	    fi
 	fi
-	$ECHO "# MADE-BY-RP-PPPOE" > /etc/resolv.conf
-	$ECHO "nameserver $DNS1" >> /etc/resolv.conf
+	echo "# MADE-BY-RP-PPPOE" > /etc/resolv.conf
+	echo "nameserver $DNS1" >> /etc/resolv.conf
 	if [ "$DNS2" != "" ] ; then
-	    $ECHO "nameserver $DNS2" >> /etc/resolv.conf
+	    echo "nameserver $DNS2" >> /etc/resolv.conf
 	fi
     fi
 fi
 
-$ECHO "Adjusting /etc/ppp/pap-secrets and /etc/ppp/chap-secrets"
+echo "Adjusting /etc/ppp/pap-secrets and /etc/ppp/chap-secrets"
 if [ -r /etc/ppp/pap-secrets ] ; then
-    $ECHO "  (But first backing it up to /etc/ppp/pap-secrets-bak)"
+    echo "  (But first backing it up to /etc/ppp/pap-secrets-bak)"
     copy /etc/ppp/pap-secrets /etc/ppp/pap-secrets-bak
 else
     cp /dev/null /etc/ppp/pap-secrets-bak
 fi
 if [ -r /etc/ppp/chap-secrets ] ; then
-    $ECHO "  (But first backing it up to /etc/ppp/chap-secrets-bak)"
+    echo "  (But first backing it up to /etc/ppp/chap-secrets-bak)"
     copy /etc/ppp/chap-secrets /etc/ppp/chap-secrets-bak
 else
     cp /dev/null /etc/ppp/chap-secrets-bak
 fi
 
 egrep -v "^$U|^\"$U\"" /etc/ppp/pap-secrets-bak > /etc/ppp/pap-secrets
-$ECHO "\"$U\"	*	\"$PWD1\"" >> /etc/ppp/pap-secrets
+echo "\"$U\"	*	\"$PWD1\"" >> /etc/ppp/pap-secrets
 egrep -v "^$U|^\"$U\"" /etc/ppp/chap-secrets-bak > /etc/ppp/chap-secrets
-$ECHO "\"$U\"	*	\"$PWD1\"" >> /etc/ppp/chap-secrets
+echo "\"$U\"	*	\"$PWD1\"" >> /etc/ppp/chap-secrets
 
-$ECHO ""
-$ECHO ""
-$ECHO ""
-$ECHO "Congratulations, it should be all set up!"
-$ECHO ""
-$ECHO "Type 'adsl-start' to bring up your ADSL link and 'adsl-stop' to bring"
-$ECHO "it down.  Type 'adsl-status' to see the link status."
+echo ""
+echo ""
+echo ""
+echo "Congratulations, it should be all set up!"
+echo ""
+echo "Type 'adsl-start' to bring up your ADSL link and 'adsl-stop' to bring"
+echo "it down.  Type 'adsl-status' to see the link status."
 exit 0
diff -urN rp-pppoe-3.5.org/scripts/adsl-start.in rp-pppoe-3.5/scripts/adsl-start.in
--- rp-pppoe-3.5.org/scripts/adsl-start.in	Wed Sep 25 17:05:37 2002
+++ rp-pppoe-3.5/scripts/adsl-start.in	Wed Sep 25 17:09:07 2002
@@ -28,7 +28,6 @@
 
 # Paths to programs
 CONNECT=@sbindir@/adsl-connect
-ECHO=@ECHO@
 IFCONFIG=/sbin/ifconfig
 
 # Set to "C" locale so we can parse messages from commands
@@ -42,63 +41,63 @@
 ME=`basename $0`
 # Must be root
 if [ "`@ID@ -u`" != 0 ] ; then
-    $ECHO "$ME: You must be root to run this script" >& 2
+    echo "$ME: You must be root to run this script" >& 2
     exit 1
 fi
 
 # Debugging
 if [ "$DEBUG" = "1" ] ; then
-    $ECHO "*** Running in debug mode... please be patient..."
+    echo "*** Running in debug mode... please be patient..."
     DEBUG=/tmp/pppoe-debug-$$
     export DEBUG
     mkdir $DEBUG
     if [ "$?" != 0 ] ; then
-	$ECHO "Could not create directory $DEBUG... exiting"
+	echo "Could not create directory $DEBUG... exiting"
 	exit 1
     fi
     DEBUG=$DEBUG/pppoe-debug.txt
 
     # Initial debug output
-    $ECHO "---------------------------------------------" > $DEBUG
-    $ECHO "* The following section contains information about your system" >> $DEBUG
+    echo "---------------------------------------------" > $DEBUG
+    echo "* The following section contains information about your system" >> $DEBUG
     date >> $DEBUG
-    $ECHO "Output of uname -a" >> $DEBUG
+    echo "Output of uname -a" >> $DEBUG
     uname -a >> $DEBUG
-    $ECHO "---------------------------------------------" >> $DEBUG
-    $ECHO "* The following section contains information about your network" >> $DEBUG
-    $ECHO "* interfaces.  The one you chose for PPPoE should contain the words:" >> $DEBUG
-    $ECHO "* 'UP' and 'RUNNING'.  If it does not, you probably have an Ethernet" >> $DEBUG
-    $ECHO "* driver problem." >> $DEBUG
-    $ECHO "Output of ifconfig -a" >> $DEBUG
+    echo "---------------------------------------------" >> $DEBUG
+    echo "* The following section contains information about your network" >> $DEBUG
+    echo "* interfaces.  The one you chose for PPPoE should contain the words:" >> $DEBUG
+    echo "* 'UP' and 'RUNNING'.  If it does not, you probably have an Ethernet" >> $DEBUG
+    echo "* driver problem." >> $DEBUG
+    echo "Output of ifconfig -a" >> $DEBUG
     $IFCONFIG -a >> $DEBUG
-    $ECHO "---------------------------------------------" >> $DEBUG
+    echo "---------------------------------------------" >> $DEBUG
     if [ "`uname -s`" = "Linux" ] ; then
-        $ECHO "* The following section contains information about kernel modules" >> $DEBUG
-	$ECHO "* If the module for your Ethernet card is 'tulip', you might" >> $DEBUG
-	$ECHO "* want to look for an updated version at http://www.scyld.com" >> $DEBUG
-	$ECHO "Output of lsmod" >> $DEBUG
+        echo "* The following section contains information about kernel modules" >> $DEBUG
+	echo "* If the module for your Ethernet card is 'tulip', you might" >> $DEBUG
+	echo "* want to look for an updated version at http://www.scyld.com" >> $DEBUG
+	echo "Output of lsmod" >> $DEBUG
 	lsmod >> $DEBUG
-	$ECHO "---------------------------------------------" >> $DEBUG
+	echo "---------------------------------------------" >> $DEBUG
     fi
-    $ECHO "* The following section lists your routing table." >> $DEBUG
-    $ECHO "* If you have an entry which starts with '0.0.0.0', you probably" >> $DEBUG
-    $ECHO "* have defined a default route and gateway, and pppd will" >> $DEBUG
-    $ECHO "* not create a default route using your ISP.  Try getting" >> $DEBUG
-    $ECHO "* rid of this route." >> $DEBUG
-    $ECHO "Output of netstat -n -r" >> $DEBUG
+    echo "* The following section lists your routing table." >> $DEBUG
+    echo "* If you have an entry which starts with '0.0.0.0', you probably" >> $DEBUG
+    echo "* have defined a default route and gateway, and pppd will" >> $DEBUG
+    echo "* not create a default route using your ISP.  Try getting" >> $DEBUG
+    echo "* rid of this route." >> $DEBUG
+    echo "Output of netstat -n -r" >> $DEBUG
     netstat -n -r >> $DEBUG
-    $ECHO "---------------------------------------------" >> $DEBUG
-    $ECHO "Contents of /etc/resolv.conf" >> $DEBUG
-    $ECHO "* The following section lists DNS setup." >> $DEBUG
-    $ECHO "* If you can browse by IP address, but not name, suspect" >> $DEBUG
-    $ECHO "* a DNS problem." >> $DEBUG
+    echo "---------------------------------------------" >> $DEBUG
+    echo "Contents of /etc/resolv.conf" >> $DEBUG
+    echo "* The following section lists DNS setup." >> $DEBUG
+    echo "* If you can browse by IP address, but not name, suspect" >> $DEBUG
+    echo "* a DNS problem." >> $DEBUG
     cat /etc/resolv.conf >> $DEBUG
-    $ECHO "---------------------------------------------" >> $DEBUG
-    $ECHO "* The following section lists /etc/ppp/options." >> $DEBUG
-    $ECHO "* You should have NOTHING in that file." >> $DEBUG
-    $ECHO "Contents of /etc/ppp/options" >> $DEBUG
+    echo "---------------------------------------------" >> $DEBUG
+    echo "* The following section lists /etc/ppp/options." >> $DEBUG
+    echo "* You should have NOTHING in that file." >> $DEBUG
+    echo "Contents of /etc/ppp/options" >> $DEBUG
     cat /etc/ppp/options >> $DEBUG 2>/dev/null
-    $ECHO "---------------------------------------------" >> $DEBUG
+    echo "---------------------------------------------" >> $DEBUG
 else
     DEBUG=""
 fi
@@ -114,7 +113,7 @@
 esac
 
 if [ ! -f "$CONFIG" -o ! -r "$CONFIG" ] ; then
-    $ECHO "$ME: Cannot read configuration file '$CONFIG'" >& 2
+    echo "$ME: Cannot read configuration file '$CONFIG'" >& 2
     exit 1
 fi
 
@@ -134,7 +133,7 @@
     # Check if still running
     kill -0 $PID > /dev/null 2>&1
     if [ $? = 0 ] ; then
-	$ECHO "$ME: There already seems to be an ADSL connection up (PID $PID)" >& 2
+	echo "$ME: There already seems to be an ADSL connection up (PID $PID)" >& 2
 	exit 1
     fi
     # Delete bogus PIDFILE
@@ -169,14 +168,14 @@
     # Looks like the interface came up
     if [ $? = 0 ] ; then
 	# Print newline if standard input is a TTY
-	tty -s && $ECHO " Connected!"
+	tty -s && echo " Connected!"
 	exit 0
     fi
 
     if test -n "$FORCEPING" ; then
-	$ECHO -n "$FORCEPING"
+	echo -n "$FORCEPING"
     else
-	tty -s && $ECHO -n "$PING"
+	tty -s && echo -n "$PING"
     fi
     sleep $CONNECT_POLL
     TIME=`expr $TIME + $CONNECT_POLL`
@@ -185,7 +184,7 @@
     fi
 done
 
-$ECHO "TIMED OUT" >& 2
+echo "TIMED OUT" >& 2
 # Timed out!  Kill the adsl-connect process and quit
 kill $CONNECT_PID > /dev/null 2>&1
 
diff -urN rp-pppoe-3.5.org/src/configure.in rp-pppoe-3.5/src/configure.in
--- rp-pppoe-3.5.org/src/configure.in	Wed Sep 25 17:05:37 2002
+++ rp-pppoe-3.5/src/configure.in	Wed Sep 25 17:05:45 2002
@@ -26,17 +26,17 @@
 AC_HEADER_TIME
 AC_STRUCT_TM
 
-dnl Check for an echo which supports -n -- another hack for Solaris
-AC_PATH_PROG(ECHO, echo, "", /usr/ucb/bin:$PATH)
-
 dnl Check for sockaddr_ll
 AC_MSG_CHECKING(for struct sockaddr_ll)
 AC_TRY_COMPILE([#include <asm/types.h>
 #include <linux/if_packet.h>
 #include <linux/if_ether.h>
 ], [struct sockaddr_ll sa;],
-ac_cv_struct_sockaddr_ll=yes, ac_cv_struct_sockaddr_ll=no)
-$ECHO $ac_cv_struct_sockaddr_ll
+[ac_cv_struct_sockaddr_ll=yes
+ AC_MSG_RESULT(yes)],
+[ac_cv_struct_sockaddr_ll=no
+ AC_MSG_RESULT(no)
+])
 if test "$ac_cv_struct_sockaddr_ll" = yes ; then
 AC_DEFINE(HAVE_STRUCT_SOCKADDR_LL)
 fi
@@ -45,8 +45,10 @@
 AC_MSG_CHECKING(for N_HDLC line discipline)
 AC_TRY_COMPILE([#include <linux/termios.h>],
 	[int x = N_HDLC;],
-	ac_cv_n_hdlc=yes, ac_cv_n_hdlc=no)
-$ECHO $ac_cv_n_hdlc
+	[ac_cv_n_hdlc=yes
+	 AC_MSG_RESULT(yes)],
+	[ac_cv_n_hdlc=no
+	 AC_MSG_RESULT(no)])
 if test "$ac_cv_n_hdlc" = yes ; then
 AC_DEFINE(HAVE_N_HDLC)
 fi
@@ -146,12 +148,15 @@
 {
 	if (socket(AF_PPPOX, SOCK_DGRAM, PX_PROTO_OE) >= 0) return 0; else return 1;
 }
-], ac_cv_linux_kernel_pppoe=yes, ac_cv_linux_kernel_pppoe=no)
+], [ac_cv_linux_kernel_pppoe=yes
+    AC_MSG_RESULT(yes)], 
+   [ac_cv_linux_kernel_pppoe=no
+    AC_MSG_RESULT(no)])
 else
 	ac_cv_linux_kernel_pppoe=no
+	AC_MSG_RESULT(no)
 fi
 
-$ECHO $ac_cv_linux_kernel_pppoe
 if test "$ac_cv_linux_kernel_pppoe" != yes ; then
    if test "$LINUX_KERNELMODE_PLUGIN" = rp-pppoe.so; then
       echo "*** Your kernel does not appear to have built-in PPPoE support,"
@@ -166,44 +171,37 @@
 
 dnl If we couldn't find pppd, die
 if test "$PPPD" = "NOTFOUND"; then
-	$ECHO ""
-	$ECHO "*** Oops!  I couldn't find pppd, the PPP daemon anywhere."
-	$ECHO "*** You must install pppd, version 2.3.10 or later."
-	$ECHO "*** I will keep going, but it may not work."
-	$ECHO ""
+        AC_MSG_WARN([*** Oops!  I couldn't find pppd, the PPP daemon anywhere.])
+	AC_MSG_WARN([*** You must install pppd, version 2.3.10 or later.])
+	AC_MSG_WARN([*** I will keep going, but it may not work.])
+	PPPD="pppd"
 fi
 
 dnl Figure out pppd version.  2.3.7 to 2.3.9 -- issue warning.  Less than
 dnl 2.3.7 -- stop
 
-PPPD_VERSION=`$PPPD --version 2>&1 | awk '{print $NF}'`
+PPPD_VERSION=`$PPPD --version 2>&1 | awk ' /version/ {print $NF}'`
 
 case "$PPPD_VERSION" in
 1.*|2.0.*|2.1.*|2.2.*|2.3.0|2.3.1|2.3.2|2.3.3|2.3.4|2.3.5|2.3.6)
-	$ECHO ""
-	$ECHO "*** Oops! Your version of pppd is $PPPD_VERSION, which is too old."
-	$ECHO "*** You need at least 2.3.7 (2.3.10 or newer recommended.)"
-	$ECHO "*** I will keep going, but it may not work."
-	$ECHO ""
+	AC_MSG_WARN([*** Oops! Your version of pppd is $PPPD_VERSION, which is too old.])
+	AC_MSG_WARN([*** You need at least 2.3.7 (2.3.10 or newer recommended.])
+	AC_MSG_WARN([*** I will keep going, but it may not work.])
 	;;
 
 2.3.7|2.3.8|2.3.9)
-	$ECHO ""
-	$ECHO "*** Warning.  Your version of pppd is $PPPD_VERSION.  You will"
-	$ECHO "*** not be able to use connect-on-demand.  Upgrade to pppd"
-	$ECHO "*** 2.3.10 or newer if you need connect-on-demand."
-	$ECHO ""
+	AC_MSG_WARN([*** Warning.  Your version of pppd is $PPPD_VERSION.  You will])
+	AC_MSG_WARN([*** not be able to use connect-on-demand.  Upgrade to pppd])
+	AC_MSG_WARN([*** 2.3.10 or newer if you need connect-on-demand.])
 	;;
 
 2*|3*|4*|5*|6*|7*|8*|9*)
 	;;
 
 *)
-	$ECHO ""
-	$ECHO "*** Oops.  I cannot figure out what version of pppd you have."
-	$ECHO "*** All I got back was '$PPPD_VERSION'"
-	$ECHO "*** I will keep going, but it may not work."
-	$ECHO ""
+	AC_MSG_WARN([*** Oops.  I cannot figure out what version of pppd you have.])
+	AC_MSG_WARN([*** All I got back was '$PPPD_VERSION'])
+	AC_MSG_WARN([*** I will keep going, but it may not work.])
 	;;
 esac
 
@@ -234,10 +232,10 @@
 }], PACK=normal, PACK=rev)
 
 if test "$PACK" = "rev" ; then
-	$ECHO "reversed"
+	AC_MSG_RESULT(reversed)
 	AC_DEFINE(PACK_BITFIELDS_REVERSED)
 else
-	$ECHO "normal"
+	AC_MSG_RESULT(normal)
 fi
 
 # Sigh... got to fix this up for tcl
@@ -304,8 +302,6 @@
 
 AC_OUTPUT(Makefile libevent/Makefile ../scripts/adsl-connect ../scripts/adsl-start ../scripts/adsl-stop ../scripts/adsl-init ../scripts/adsl-init-suse ../scripts/adsl-init-turbolinux ../scripts/adsl-setup ../gui/Makefile ../gui/tkpppoe $EXTRACONFIGS)
 
-$ECHO ""
-$ECHO "On this platform, the following targets will be built:"
-$ECHO "        $TARGETS"
-$ECHO ""
-$ECHO "Type 'make' to compile the software."
+AC_MSG_WARN([On this platform, the following targets will be built:])
+AC_MSG_WARN([$TARGETS])
+AC_MSG_WARN([Type 'make' to compile the software.])
